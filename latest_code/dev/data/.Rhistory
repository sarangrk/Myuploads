shiny::runApp('Desktop/demand_forecasting/dffdemo/dev')
library(ggplot2)
packages("shiny")
library(shiny)
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
version
runApp('Desktop/PAMdemo/pam-analyser')
install.packages('rms', dependencies = TRUE)
install.packages("devtools")
install_github(c("ramnathv/htmlwidgets", "smartinsightsfromdata/rpivotTable"))
devtools::install_github(c("ramnathv/htmlwidgets", "smartinsightsfromdata/rpivotTable"))
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/demand_forecasting/dffdemo/dev')
devtools::install.packages("forecastingFrameworkR", repos=c("https://nexus.support.data-lab.io/repository/dslab-r", getOption("repos"))
)
runApp('Desktop/demand_forecasting/dffdemo/dev')
install.packages("forecastingFrameworkR", repos=c("https://nexus.support.data-lab.io/repository/dslab-r", getOption("repos")), dependencies = TRUE)
shiny::runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
install.packages("riskRegression")
runApp('Desktop/PAMdemo/pam-analyser')
install.packages("visNetwork")
runApp('Desktop/PAMdemo/pam-analyser')
View(checkData)
shiny::runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
print(csv_files)
runApp('Desktop/PAMdemo/pam-analyser')
print(s3_datasets)
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
runApp('Desktop/PAMdemo/pam-analyser')
shiny::runApp('Desktop/PAMdemo/pam-analyser')
install.packages(:)
)
)
install.packages("dmmfR")
fluidPage(
fluidRow(
box(width=12, align='left', title = 'Forecast Evaluation',
column(
column(uiOutput(ns('store')), width=2),
column(uiOutput(ns('product_name')), width=4),
column(selectInput(ns('data_set'), 'Select data set to forecast', choices=c('Training', 'All'), selected = "All"), width=3),
column(style = "margin-top: 25px;", uiOutput(ns('forecast')), width=2),
width=12)
)),
fluidRow(
box(width=12, align='left', title = 'Store Details',
column( width=12,
DT::dataTableOutput(ns('Datils_overview'))
)
)),
fluidRow(
box(width=12, align='left', title = 'Forecast Plot',
column(
plotlyOutput(ns("forecastplot")),
width=12)
)
),
fluidRow(
box(width=12, align='left', title = 'Forecast Components',
column(
selectInput(ns('component'), 'Select Component', choices=c( 'weekly'
, 'SNOW'
, 'log_price'
, 'RAIN'
, 'IS_HOLIDAY'
, 'NEARBYCAR'
, 'DIRECT_COMPETITOR', 'INDIRECT_COMPETITOR','STORE_SATURATION'
)
, selected = 'Day of Week', width=150),
plotlyOutput(ns("componentplot")),
width=12)
)
),
fluidRow(
box(width=12, align='left', title = 'Performance',
column(
DT::dataTableOutput(ns("performancetable"), width = "300px"),
br(), br(),
selectInput(ns('metric'), 'Select a Metric', choices=c('MAPE (14 days)', 'MAPE (28 days)'), selected = 'MAPE (14 days)', width=150),
plotlyOutput(ns("performanceplot")),
width=12)
)
)
) # end of fluidPage
library('ggplot2')
install.packages()
version
library('bigrquery')
devtools::install_github('hadley/ggplot2')
shiny::runApp('Desktop/demand_forecasting/dffdemo/dev')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
shiny::runApp('Desktop/demand_forecasting/dffdemo/dev')
install.packages("ggplot2")
install.packages("ggplot2")
devtools::install_github('hadley/ggplot2')
results <- readRDS("~/Desktop/demand_forecasting/dffdemo/dev/data/results.rds")
result = readRDS('results..rds')
getwd()
setwd("~/Desktop/demand_forecasting/dffdemo/dev/data")
result = readRDS('results..rds')
getwd()
result = readRDS('results..rds', 'rb')
result = readRDS('results.rds', 'rb')
View(result)
result = readRDS('results.rds', 'rb')
products <- readRDS("~/Desktop/demand_forecasting/dffdemo/dev/data/products.rds")
product = readRDS('products.rds','rb')
View(products)
View(result)
View(products)
Competitor_data <- readRDS("~/Desktop/demand_forecasting/dffdemo/dev/data/Competitor_data.rds")
View(Competitor_data)
View(Competitor_data)
